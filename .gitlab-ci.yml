stages:
#   - install_dependencies
  - build
  - auto-tagging
  - gmp-auto-tagging
  - deploy
  - scan
  - update

variables:
  MYSQL_CONNECTION: "mysql -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASS "
  STATUS_SCRIPT: /home/gitlab-runner/monitor/deployment-status.sh
  DEV_STORAGE_PATH: "ilensdev/ilens/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH"
  QA_STORAGE_PATH: "ilensqa/ilens/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH"
  PROD_STORAGE_PATH: "ilensprod/ilens/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH"
  DEV_ACR: "azacrknowledgelens.azurecr.io/knowledgelens/products/ilens/dev"
  QA_ACR: "azacrknowledgelens.azurecr.io/knowledgelens/products/ilens/qa"
  PROD_ACR: "azrilensprod.azurecr.io/ilens/release/versions"
  HELM_CHART: /home/gitlab-runner/kubernetes/ilens/$QA_ENV/ucp_ui
  PROXY_CONFIG: proxy-configmap.yml
  DEPLOYMENT_YML: ucp-webapp.yml
  TIMEOUT: 960s


before_script:
  - val=`echo $($MYSQL_CONNECTION -e "SELECT COUNT(*) FROM $VERSION_DB.$DB_TABLE WHERE category='Server' AND type='UI' AND os='docker' AND module_name='$CI_PROJECT_NAME' ") | cut -d " " -f2`
  - if [ $val == 0 ]; then $MYSQL_CONNECTION -e "INSERT INTO $VERSION_DB.$DB_TABLE values('Server','UI','$CI_PROJECT_NAME','docker', '7', '0', '0', '0')";fi
  - QA=$($MYSQL_CONNECTION -N -e "SELECT qa FROM $VERSION_DB.$DB_TABLE where module_name = '$CI_PROJECT_NAME' AND type = 'UI' AND category = 'Server' AND os = 'docker'")
  - DEV=$($MYSQL_CONNECTION -N -e "SELECT dev FROM $VERSION_DB.$DB_TABLE where module_name = '$CI_PROJECT_NAME' AND type = 'UI' AND category = 'Server' AND os = 'docker'")
  - PROD=$($MYSQL_CONNECTION -N -e "SELECT prod FROM $VERSION_DB.$DB_TABLE where module_name = '$CI_PROJECT_NAME' AND type = 'UI' AND category = 'Server' AND os = 'docker'")
  - rels_val=`echo $($MYSQL_CONNECTION -e "SELECT COUNT(*) FROM $VERSION_DB.$VERSION_RELEASE_TABLE WHERE  module_name='$CI_PROJECT_NAME' ") | cut -d " " -f2`
  - if [ $rels_val == 0 ]; then $MYSQL_CONNECTION -N -e "INSERT INTO $VERSION_DB.$VERSION_RELEASE_TABLE values('$CI_PROJECT_NAME', 'iLens', '5', '7', '0', '0')";fi
  - ILENS=$($MYSQL_CONNECTION -N -e "SELECT ilens_version FROM "$VERSION_DB.$VERSION_RELEASE_TABLE" where module_name = '$CI_PROJECT_NAME'")
  - RELEASE=$($MYSQL_CONNECTION -N -e "SELECT release_version FROM "$VERSION_DB.$VERSION_RELEASE_TABLE" where module_name = '$CI_PROJECT_NAME'")
  - FEATURE=$($MYSQL_CONNECTION -N -e "SELECT feature_version FROM "$VERSION_DB.$VERSION_RELEASE_TABLE" where module_name = '$CI_PROJECT_NAME'")
  - PATCH=$($MYSQL_CONNECTION -N -e "SELECT patch_version FROM "$VERSION_DB.$VERSION_RELEASE_TABLE" where module_name = '$CI_PROJECT_NAME'")

# install_dependencies:
#   stage: install_dependencies
#   image: azacrknowledgelens.azurecr.io/knowledgelens/klit-operation/devops/gitlab-runner:ubuntu-mysql-az-node13.12.0
#   script:
#     - npm install
#   only:
#     changes:
#       - package.json
#     refs:
#       - develop
#       - QA
#       - master
#   tags:
#   - docker

code-build:
  stage: build
  image: azacrknowledgelens.azurecr.io/knowledgelens/klit-operation/devops/gitlab-runner:ubuntu-mysql-az-node14.18.2
  script:
    - npm install
    - node --max_old_space_size=9216 "node_modules/@angular/cli/bin/ng" build --configuration production --aot --outputHashing=all
    - cp -r Dockerfile dist/
    - mv dist/UI dist/code
    - tar czvf $CI_PROJECT_NAME.tar.gz dist/
    - SOURCE_BRANCH=$(echo $CI_COMMIT_TITLE | cut -f 3 -d " " | cut -f 1 -d "/" | cut -f 2 -d "'")
    - >
        if [ $CI_COMMIT_BRANCH == "master" ]; then
          if [ "$SOURCE_BRANCH" = "QA" ]; then
            RELEASE=`expr $RELEASE + 1`; FEATURE=0; PATCH=0;
            STORAGE_PATH=$PROD_STORAGE_PATH/v$ILENS.$RELEASE.$FEATURE.$PATCH
            PROD=$RELEASE; QA=0; DEV=0;
            $MYSQL_CONNECTION -e "UPDATE $VERSION_DB.$DB_TABLE SET prod='$PROD' ,qa='$QA', dev='$DEV' WHERE module_name = '$CI_PROJECT_NAME' AND type = 'UI' AND category = 'Server' AND os = 'docker'"
          elif [ $SOURCE_BRANCH == "feature" ]; then
            FEATURE=`expr $FEATURE + 1`; PATCH=0;
            STORAGE_PATH=$PROD_STORAGE_PATH/v$ILENS.$RELEASE.$FEATURE.$PATCH
          elif [ $SOURCE_BRANCH == "patch" ]; then
            PATCH=`expr $PATCH + 1`;
            STORAGE_PATH=$PROD_STORAGE_PATH/v$ILENS.$RELEASE.$FEATURE.$PATCH
          else
            echo -e "\n Invalid Source Branch."
            exit 1
          fi
          $MYSQL_CONNECTION -e "UPDATE $VERSION_DB.$VERSION_RELEASE_TABLE SET release_version='$RELEASE', feature_version='$FEATURE', patch_version='$PATCH'  WHERE module_name = '$CI_PROJECT_NAME' "
          $MYSQL_CONNECTION -e "INSERT INTO $HISTORY_DB.$VERSION_RELEASE_TABLE values('$CI_JOB_ID', '$CI_PROJECT_NAME','ilens', '$ILENS.$RELEASE.$FEATURE.$PATCH', '$CI_COMMIT_SHA', '$GITLAB_USER_NAME', '$CI_COMMIT_REF_NAME')"
        fi

    - if [ $CI_COMMIT_BRANCH == "develop" ]; then DEV=`expr $DEV + 1`; STORAGE_PATH=$DEV_STORAGE_PATH/$PROD.$QA.$DEV; fi
    - if [ $CI_COMMIT_BRANCH == "QA" ]; then QA=`expr $QA + 1`; DEV=0; STORAGE_PATH=$QA_STORAGE_PATH/$PROD.$QA.$DEV; fi
    - echo $STORAGE_PATH
    - az storage blob upload  --account-name $ACCOUNT_NAME --account-key $ACCESS_KEY --container-name $STORAGE_PATH --name $CI_PROJECT_NAME.tar.gz --file $CI_PROJECT_NAME.tar.gz
    - >
        if [ $CI_COMMIT_BRANCH == "develop" ] || [ $CI_COMMIT_BRANCH == "QA" ]; then
          $MYSQL_CONNECTION -e "INSERT INTO $HISTORY_DB.$DB_TABLE values('$CI_JOB_ID','Server','UI', '$CI_PROJECT_NAME','docker', '$PROD.$QA.$DEV', '$CI_COMMIT_SHA', '$GITLAB_USER_NAME', '$CI_COMMIT_REF_NAME')"
          echo $PROD.$QA.$DEV
          $MYSQL_CONNECTION -e "UPDATE $VERSION_DB.$DB_TABLE SET prod='$PROD' ,qa='$QA', dev='$DEV' WHERE module_name = '$CI_PROJECT_NAME' AND type = 'UI' AND category = 'Server' AND os = 'docker'"
        fi
  only:
  - master
  tags:
  - docker

  #~~~~~| GMP auto-tagging |~~~~~#

gmp-auto-tagging:
  stage: auto-tagging
  before_script:
    - val=`echo $($MYSQL_CONNECTION -e "SELECT COUNT(*) FROM $VERSION_DB.$GMP_RELEASE_TABLE WHERE  module_name='$CI_PROJECT_NAME' ") | cut -d " " -f2`
    - if [ $val == 0 ]; then $MYSQL_CONNECTION -N -e "INSERT INTO $VERSION_DB.$GMP_RELEASE_TABLE values('$CI_PROJECT_NAME', 'iLens', '6', '7', '0', '0')";fi
    - ILENS=$($MYSQL_CONNECTION -N -e "SELECT ilens_version FROM "$VERSION_DB.$GMP_RELEASE_TABLE" where module_name = '$CI_PROJECT_NAME'")
    - RELEASE=$($MYSQL_CONNECTION -N -e "SELECT release_version FROM "$VERSION_DB.$GMP_RELEASE_TABLE" where module_name = '$CI_PROJECT_NAME'")
    - FEATURE=$($MYSQL_CONNECTION -N -e "SELECT feature_version FROM "$VERSION_DB.$GMP_RELEASE_TABLE" where module_name = '$CI_PROJECT_NAME'")
    - PATCH=$($MYSQL_CONNECTION -N -e "SELECT patch_version FROM "$VERSION_DB.$GMP_RELEASE_TABLE" where module_name = '$CI_PROJECT_NAME'")

  script:
    - SOURCE_BRANCH=$(echo $CI_COMMIT_TITLE | cut -f 3 -d " " | cut -f 1 -d "/" | cut -f 2 -d "'")
    - >
        if [ "$SOURCE_BRANCH" = "QA" ]; then
          ((RELEASE=RELEASE+1)) && FEATURE=0 && PATCH=0;
          TAG_NAME=gmp-v$ILENS.$RELEASE.$FEATURE
          IMAGE_URL=azrilensprod.azurecr.io/ilens/gmp-release/versions/v"$ILENS.$RELEASE:$CI_PROJECT_NAME-$TAG_NAME"
          PROD=$RELEASE; QA=0; DEV=0;
        elif [ $SOURCE_BRANCH == "feature" ]; then
          ((FEATURE=FEATURE+1)) && PATCH=0;
          TAG_NAME=gmp-v$ILENS.$RELEASE.$FEATURE
          IMAGE_URL=azrilensprod.azurecr.io/ilens/gmp-release/versions/v"$ILENS.$RELEASE:$CI_PROJECT_NAME-$TAG_NAME"
        elif [ $SOURCE_BRANCH == "patch" ]; then
          ((PATCH=PATCH+1));
          TAG_NAME=gmp-v$ILENS.$RELEASE.$FEATURE.$PATCH
          IMAGE_URL=azrilensprod.azurecr.io/ilens/gmp-release/versions/v"$ILENS.$RELEASE:$CI_PROJECT_NAME-$TAG_NAME"
        else
          exit 1
        fi

    - echo -e "\n\nImage:" $IMAGE_URL >> ReleaseNote.txt
    - sed -i "1s|^|Version":" $TAG_NAME\n|" ReleaseNote.txt
    - sed -i "1s|^|Module Name":" $CI_PROJECT_NAME\n|" ReleaseNote.txt
    - docker build -t $IMAGE_URL .
    - docker push $IMAGE_URL
    - docker rmi --force $IMAGE_URL
    - URL=$(echo $CI_PROJECT_URL | sed 's|https://||')
    - git remote set-url origin https://$GIT_USRNAME:$GIT_USRPASSWD@$URL
    - git config user.email "devopsilens@gmail.com"
    - git config user.name "$GIT_USRNAME"
    - git tag -a $TAG_NAME -F ReleaseNote.txt
    - git push origin $TAG_NAME
    - $MYSQL_CONNECTION -e "UPDATE $VERSION_DB.$GMP_RELEASE_TABLE SET release_version='$RELEASE', feature_version='$FEATURE', patch_version='$PATCH'  WHERE module_name = '$CI_PROJECT_NAME' "
    - $MYSQL_CONNECTION -e "INSERT INTO $HISTORY_DB.$GMP_RELEASE_TABLE values('$CI_JOB_ID', '$CI_PROJECT_NAME','iLens', '$ILENS.$RELEASE.$FEATURE', '$CI_COMMIT_SHA', '$GITLAB_USER_NAME', '$CI_COMMIT_REF_NAME')"
  tags:
    - shell
  only:
    - gmp-release

auto-tagging:
  stage: auto-tagging
  script:
    - STORAGE_PATH=$PROD_STORAGE_PATH/v$ILENS.$RELEASE.$FEATURE.$PATCH
    - echo $STORAGE_PATH
    - az storage blob download --account-name $ACCOUNT_NAME --account-key $ACCESS_KEY -c $STORAGE_PATH -n $CI_PROJECT_NAME.tar.gz -f $CI_PROJECT_NAME.tar.gz 
    - tar xzvf $CI_PROJECT_NAME.tar.gz
    - SOURCE_BRANCH=$(echo $CI_COMMIT_TITLE | cut -f 3 -d " " | cut -f 1 -d "/" | cut -f 2 -d "'")
    - >
        if [ "$SOURCE_BRANCH" = "QA" ] || [ $SOURCE_BRANCH == "feature" ]; then
          IMAGE_URL=$PROD_ACR/v$ILENS.$RELEASE:$CI_PROJECT_NAME-v$ILENS.$RELEASE.$FEATURE
          VERSION=v$ILENS.$RELEASE.$FEATURE
        elif [ $SOURCE_BRANCH == "patch" ]; then
          IMAGE_URL=$PROD_ACR/v$ILENS.$RELEASE:$CI_PROJECT_NAME-v$ILENS.$RELEASE.$FEATURE.$PATCH
          VERSION=v$ILENS.$RELEASE.$FEATURE.$PATCH
        else
          echo -e "\n Invalid Source Branch."
          exit 1
        fi

    - echo -e "\n\nImage:" $IMAGE_URL >> ReleaseNote.txt
    - echo -e "\nBlob Path:" $STORAGE_PATH/$CI_PROJECT_NAME.tar.gz >> ReleaseNote.txt
    - sed -E -i'' "s|(Module Name:).*|\1 "$CI_PROJECT_NAME"|" ReleaseNote.txt
    - sed -E -i'' "s|(Version:).*|\1 "$VERSION"|" ReleaseNote.txt
    - cd dist/ && docker build -t $IMAGE_URL . && cd ..
    - docker push $IMAGE_URL
    - docker rmi --force $IMAGE_URL
    - rm -rf $CI_PROJECT_NAME.tar.gz dist/
    - URL=$(echo $CI_PROJECT_URL | sed 's|https://||')
    - git remote set-url origin https://$GIT_USRNAME:$GIT_USRPASSWD@$URL
    - git config user.email "devopsilens@gmail.com"
    - git config user.name "$GIT_USRNAME"
    - git tag -a $VERSION -F ReleaseNote.txt
    - git push origin $VERSION
  dependencies:
    - code-build
  tags:
    - shell
  only:
    - master
    
qa-build-deployment:
  stage: deploy
  script:
    - QA=`expr $QA + 1` && DEV=0
    - STORAGE_PATH=$QA_STORAGE_PATH/$PROD.$QA.$DEV
    - IMAGE_URL=$QA_ACR/$CI_PROJECT_NAME:v$PROD.$QA.$DEV
    - BUILD_VOLUME_PATH=/home/gitlab-runner/ui-build/QA/v$PROD.$QA.$DEV
    - docker build -t $IMAGE_URL -f Dockerfile-build .
    - docker push $IMAGE_URL
    - docker run --rm -v $BUILD_VOLUME_PATH:/mnt/out "$IMAGE_URL" /bin/cp /app/irs-ui.tar.gz /mnt/out/
    - sudo chown -R gitlab-runner $BUILD_VOLUME_PATH
    - mv $BUILD_VOLUME_PATH/irs-ui.tar.gz $BUILD_VOLUME_PATH/$CI_PROJECT_NAME.tar.gz
    - echo Storage Path= $STORAGE_PATH
    - echo File Name= $CI_PROJECT_NAME.tar.gz
    - az storage blob upload  --account-name $ACCOUNT_NAME --account-key $ACCESS_KEY --container-name $STORAGE_PATH --name $CI_PROJECT_NAME.tar.gz --file $BUILD_VOLUME_PATH/$CI_PROJECT_NAME.tar.gz
    - echo "Deploying to the QA-UI server..."
    - sshpass -p $UIVM_PASSWD ssh $UIVM_USERNAME@$UIVM_HOSTNAME "mkdir -p /tmp/$CI_PROJECT_NAME/tar/ /tmp/$CI_PROJECT_NAME/untar/"
    - sshpass -p $UIVM_PASSWD scp $BUILD_VOLUME_PATH/$CI_PROJECT_NAME.tar.gz $UIVM_USERNAME@$UIVM_HOSTNAME:/tmp/$CI_PROJECT_NAME/tar/
    - sshpass -p $UIVM_PASSWD ssh $UIVM_USERNAME@$UIVM_HOSTNAME "tar xzvf /tmp/$CI_PROJECT_NAME/tar/$CI_PROJECT_NAME.tar.gz -C /tmp/$CI_PROJECT_NAME/untar/"
    - sshpass -p $UIVM_PASSWD ssh $UIVM_USERNAME@$UIVM_HOSTNAME "rm -rf /usr/share/nginx/html/iLens/ucp_qa_unifytwin/* && cp -r /tmp/$CI_PROJECT_NAME/untar/dist/code/* /usr/share/nginx/html/iLens/ucp_qa_unifytwin/"

  after_script:
    - sshpass -p $UIVM_PASSWD ssh $UIVM_USERNAME@$UIVM_HOSTNAME "rm -rf /tmp/$CI_PROJECT_NAME"
    - QA=$($MYSQL_CONNECTION -N -e "SELECT qa FROM $VERSION_DB.$DB_TABLE where module_name = '$CI_PROJECT_NAME' AND type = 'UI' AND category = 'Server' AND os = 'docker'")
    - DEV=$($MYSQL_CONNECTION -N -e "SELECT dev FROM $VERSION_DB.$DB_TABLE where module_name = '$CI_PROJECT_NAME' AND type = 'UI' AND category = 'Server' AND os = 'docker'")
    - PROD=$($MYSQL_CONNECTION -N -e "SELECT prod FROM $VERSION_DB.$DB_TABLE where module_name = '$CI_PROJECT_NAME' AND type = 'UI' AND category = 'Server' AND os = 'docker'")
    - QA=`expr $QA + 1` && DEV=0
    - BUILD_VOLUME_PATH=/home/gitlab-runner/ui-build/dev/v$PROD.$QA.$DEV
    - rm -rf $BUILD_VOLUME_PATH
  only:
  - QA
  tags:
  - shell

tag-update-qa:
  stage: update
  script:
     - DEV=0
     - IMAGE_URL=$QA_ACR/$CI_PROJECT_NAME:v$PROD.$QA.$DEV
     - docker rmi --force $IMAGE_URL
     - QA=`expr $QA + 1` && DEV=0
     - $MYSQL_CONNECTION -e "INSERT INTO $HISTORY_DB.$DB_TABLE values('$CI_JOB_ID','Server','UI', '$CI_PROJECT_NAME','docker', '$PROD.$QA.$DEV', '$CI_COMMIT_SHA', '$GITLAB_USER_NAME', '$CI_COMMIT_REF_NAME')"
     - echo $PROD.$QA.$DEV
     - $MYSQL_CONNECTION -e "UPDATE $VERSION_DB.$DB_TABLE SET prod='$PROD' ,qa='$QA', dev='$DEV' WHERE module_name = '$CI_PROJECT_NAME' AND type = 'UI' AND category = 'Server' AND os = 'docker'"
  dependencies:
    - qa-build-deployment
  only:
  - QA
  tags: 
  - shell
  

# #~~~~~| QA K8 |~~~~~#
# qa-k8-deployment:
#   stage: deploy
#   script:
#     - STORAGE_PATH=$QA_STORAGE_PATH/$PROD.$QA.$DEV
#     - echo $STORAGE_PATH
#     - echo $PROD.$QA.$DEV
#     - az storage blob download --account-name $ACCOUNT_NAME --account-key $ACCESS_KEY -c $STORAGE_PATH -n $CI_PROJECT_NAME.tar.gz -f $CI_PROJECT_NAME.tar.gz
#     - IMAGE_URL=$QA_ACR/$CI_PROJECT_NAME:v$PROD.$QA.$DEV
#     - export KUBECONFIG=/home/gitlab-runner/.kube/$QA_ENV
#     - NAMESPACE=ilens-core
#     - tar xzvf $CI_PROJECT_NAME.tar.gz
#     - cd dist
#     - docker build -t $IMAGE_URL .
#     - docker push $IMAGE_URL
#     # - docker rmi --force $IMAGE_URL
#     - >
#         for YML in ${DEPLOYMENT_YML[@]};
#         do
#             FILE_PATH=$HELM_CHART/$YML
#             SERVICE=$(echo $YML | cut -f 1 -d "." )
#             CURR_VERSION=$(cat $FILE_PATH | grep "imageName:" )
#             CURR_VERSION=$(echo $CURR_VERSION | cut -f 3 -d ":")
#             echo " Deploying $SERVICE"
#             echo " $SERVICE Version: $CURR_VERSION"
#             sed -E -i'' "s|(.*imageName:.*"$QA_URL"/).*|\1"$CI_PROJECT_NAME":v"$PROD.$QA.$DEV"|" $FILE_PATH
#             helm upgrade --install $SERVICE $HELM_CHART -f $FILE_PATH -f $HELM_CHART/$PROXY_CONFIG -n $NAMESPACE --history-max 1
#             if ! sh $STATUS_SCRIPT $SERVICE $NAMESPACE $TIMEOUT ; then
#               sed -E -i'' "s|(.*imageName:.*"$QA_URL"/).*|\1"$CI_PROJECT_NAME":"$CURR_VERSION"|" $FILE_PATH
#               helm upgrade --install $SERVICE $HELM_CHART -f $FILE_PATH -f $HELM_CHART/$PROXY_CONFIG -n $NAMESPACE --history-max 1
#               echo " $SERVICE Reverted to the previous version..."
#               exit 1
#             fi
#         done
#   dependencies:
#     - code-build
#   only:
#   - QA
#   tags:
#   - shell

# vulnerability-scanner:
#   stage: scan
#   script:
#      - DOCKER_IMAGE=$QA_ACR/$CI_PROJECT_NAME:v$PROD.$QA.$DEV
#      - trivy image --format template --template "@/home/gitlab-runner/image-scanner/templates/html.tpl" -o imageScanner-$CI_PROJECT_NAME.html $DOCKER_IMAGE
#      - trivy image --format json -o imageScanner-$CI_PROJECT_NAME.json $DOCKER_IMAGE
#      - mv imageScanner-$CI_PROJECT_NAME.html /data0/email-util/module/reports/
#      - cd /home/gitlab-runner/image-scanner/
#      - ./mail imageScanner-$CI_PROJECT_NAME.html $DOCKER_IMAGE
#      - cd -
#      - /home/gitlab-runner/image-scanner/severity_check imageScanner-$CI_PROJECT_NAME.json

#   dependencies:
#     - qa-k8-deployment
#   only:
#   - QA
#   tags: 
#   - shell


# dev-deployment-k8:
#   stage: deploy
#   script:
#     - STORAGE_PATH=$DEV_STORAGE_PATH/$PROD.$QA.$DEV
#     - echo $STORAGE_PATH
#     - az storage blob download --account-name $ACCOUNT_NAME --account-key $ACCESS_KEY -c $STORAGE_PATH -n $CI_PROJECT_NAME.tar.gz -f $CI_PROJECT_NAME.tar.gz
#     - echo "Deploying to the dev kubernetes server..."
#     - sshpass -p $DEV_K8_PASSWD ssh $DEV_K8_USERNAME@$DEV_K8_HOSTNAME "mkdir -p /tmp/$CI_PROJECT_NAME/tar/ /tmp/$CI_PROJECT_NAME/untar/"
#     - sshpass -p $DEV_K8_PASSWD scp $CI_PROJECT_NAME.tar.gz $DEV_K8_USERNAME@$DEV_K8_HOSTNAME:/tmp/$CI_PROJECT_NAME/tar/
#     - sshpass -p $DEV_K8_PASSWD ssh $DEV_K8_USERNAME@$DEV_K8_HOSTNAME "tar xzvf /tmp/$CI_PROJECT_NAME/tar/$CI_PROJECT_NAME.tar.gz -C /tmp/$CI_PROJECT_NAME/untar/"
#     - sshpass -p $DEV_K8_PASSWD ssh $DEV_K8_USERNAME@$DEV_K8_HOSTNAME "rm -rf /usr/share/nginx/html/iLens/dev_master/*"
#     - sshpass -p $DEV_K8_PASSWD ssh $DEV_K8_USERNAME@$DEV_K8_HOSTNAME "rsync -r /tmp/$CI_PROJECT_NAME/untar/dist/code/* /usr/share/nginx/html/iLens/dev_master/"
#   after_script:
#     - sshpass -p $DEV_K8_PASSWD ssh $DEV_K8_USERNAME@$DEV_K8_HOSTNAME "rm -rf /tmp/$CI_PROJECT_NAME"
#     - rm -f $CI_PROJECT_NAME.tar.gz
#   only:
#   - develop
#   dependencies:
#     - code-build
#   tags:
#   - shell

# dev-deployment-220:
#   stage: deploy
#   script:
#     - STORAGE_PATH=$DEV_STORAGE_PATH/$PROD.$QA.$DEV
#     - echo $STORAGE_PATH
#     - az storage blob download --account-name $ACCOUNT_NAME --account-key $ACCESS_KEY -c $STORAGE_PATH -n $CI_PROJECT_NAME.tar.gz -f $CI_PROJECT_NAME.tar.gz
#     - echo "Deploying to the dev server..."
#     - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "mkdir -p /tmp/$CI_PROJECT_NAME/tar/ /tmp/$CI_PROJECT_NAME/untar/"
#     - sshpass -p $OFC_PASSWD scp $CI_PROJECT_NAME.tar.gz $OFC_USERNAME@$OFC_HOSTNAME:/tmp/$CI_PROJECT_NAME/tar/
#     - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "tar xzvf /tmp/$CI_PROJECT_NAME/tar/$CI_PROJECT_NAME.tar.gz -C /tmp/$CI_PROJECT_NAME/untar/"
#     - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "rm -rf /usr/share/nginx/html/iLens/dev_master/*"
#     - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "cp -r /tmp/$CI_PROJECT_NAME/untar/dist/code/* /usr/share/nginx/html/iLens/dev_master/"
#   after_script:
#     - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "rm -rf /tmp/$CI_PROJECT_NAME"
#     - rm -f $CI_PROJECT_NAME.tar.gz
#   only:
#   - develop
#   dependencies:
#     - code-build
#   tags:
#   - shell


dev-build-deployment:
  stage: deploy
  script:
    - DEV=`expr $DEV + 1`
    - STORAGE_PATH=$DEV_STORAGE_PATH/$PROD.$QA.$DEV
    - IMAGE_URL=$QA_ACR/$CI_PROJECT_NAME:v$PROD.$QA.$DEV
    - BUILD_VOLUME_PATH=/home/gitlab-runner/ui-build/dev/v$PROD.$QA.$DEV
    - docker build -t $IMAGE_URL -f Dockerfile-build .
    - docker push $IMAGE_URL
    - docker run --rm -v $BUILD_VOLUME_PATH:/mnt/out "$IMAGE_URL" /bin/cp /app/irs-ui.tar.gz /mnt/out/
    - sudo chown -R gitlab-runner $BUILD_VOLUME_PATH
    - mv $BUILD_VOLUME_PATH/irs-ui.tar.gz $BUILD_VOLUME_PATH/$CI_PROJECT_NAME.tar.gz
    - echo Storage Path= $STORAGE_PATH
    - echo File Name= $CI_PROJECT_NAME.tar.gz
    - az storage blob upload  --account-name $ACCOUNT_NAME --account-key $ACCESS_KEY --container-name $STORAGE_PATH --name $CI_PROJECT_NAME.tar.gz --file $BUILD_VOLUME_PATH/$CI_PROJECT_NAME.tar.gz
    - echo "Deploying to the dev server..."
    - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "mkdir -p /tmp/$CI_PROJECT_NAME/tar/ /tmp/$CI_PROJECT_NAME/untar/"
    - sshpass -p $OFC_PASSWD scp $BUILD_VOLUME_PATH/$CI_PROJECT_NAME.tar.gz $OFC_USERNAME@$OFC_HOSTNAME:/tmp/$CI_PROJECT_NAME/tar/
    - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "tar xzvf /tmp/$CI_PROJECT_NAME/tar/$CI_PROJECT_NAME.tar.gz -C /tmp/$CI_PROJECT_NAME/untar/"
    - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "rm -rf /usr/share/nginx/html/iLens/ucp_dev/*"
    - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "cp -r /tmp/$CI_PROJECT_NAME/untar/dist/code/* /usr/share/nginx/html/iLens/ucp_dev/"
  after_script:
    - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "rm -rf /tmp/$CI_PROJECT_NAME"
    - QA=$($MYSQL_CONNECTION -N -e "SELECT qa FROM $VERSION_DB.$DB_TABLE where module_name = '$CI_PROJECT_NAME' AND type = 'UI' AND category = 'Server' AND os = 'docker'")
    - DEV=$($MYSQL_CONNECTION -N -e "SELECT dev FROM $VERSION_DB.$DB_TABLE where module_name = '$CI_PROJECT_NAME' AND type = 'UI' AND category = 'Server' AND os = 'docker'")
    - PROD=$($MYSQL_CONNECTION -N -e "SELECT prod FROM $VERSION_DB.$DB_TABLE where module_name = '$CI_PROJECT_NAME' AND type = 'UI' AND category = 'Server' AND os = 'docker'")
    - DEV=`expr $DEV + 1`
    - BUILD_VOLUME_PATH=/home/gitlab-runner/ui-build/dev/v$PROD.$QA.$DEV
    - rm -rf $BUILD_VOLUME_PATH
  only:
  - develop
  tags:
  - shell

tag-update-dev:
  stage: update
  script:
     - IMAGE_URL=$QA_ACR/$CI_PROJECT_NAME:v$PROD.$QA.$DEV
     - docker rmi --force $IMAGE_URL
     - DEV=`expr $DEV + 1`
     - $MYSQL_CONNECTION -e "INSERT INTO $HISTORY_DB.$DB_TABLE values('$CI_JOB_ID','Server','UI', '$CI_PROJECT_NAME','docker', '$PROD.$QA.$DEV', '$CI_COMMIT_SHA', '$GITLAB_USER_NAME', '$CI_COMMIT_REF_NAME')"
     - echo $PROD.$QA.$DEV
     - $MYSQL_CONNECTION -e "UPDATE $VERSION_DB.$DB_TABLE SET prod='$PROD' ,qa='$QA', dev='$DEV' WHERE module_name = '$CI_PROJECT_NAME' AND type = 'UI' AND category = 'Server' AND os = 'docker'"
  dependencies:
    - dev-build-deployment
  only:
  - develop
  tags: 
  - shell


build-dev:
  stage: build
  image:
    name: ailens-registry.knowledgelens.com:9084/repository/kl-docker-repo/kl-it-operations/gitlab-runner/ubuntu-mysql:node13.12.0
  script:
    - npm install
    - node --max_old_space_size=8192 "node_modules/@angular/cli/bin/ng" build --configuration production --aot --outputHashing=all
    - cd dist
    - tar czvf $CI_PROJECT_NAME.tar.gz UI/
    - curl -u"$ARTIFACTORY_USER:$ARTIFACTORY_PASS" -T $CI_PROJECT_NAME.tar.gz "$ARTIFACTORY_TEST/ilens/x64/KPMG_to_develop/$CI_PROJECT_NAME.tar.gz"

  only:
  - code_merge/KPMG_to_develop
  tags:
  - docker

dev-deployment-220-code-merge:
  stage: deploy
  script:
    - echo "Deploying to the dev server..."
    - wget $ARTIFACTORY_TEST/ilens/x64/KPMG_to_develop/$CI_PROJECT_NAME.tar.gz
    - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "mkdir -p /tmp/$CI_PROJECT_NAME/tar/ /tmp/$CI_PROJECT_NAME/untar/"
    - sshpass -p $OFC_PASSWD scp $CI_PROJECT_NAME.tar.gz $OFC_USERNAME@$OFC_HOSTNAME:/tmp/$CI_PROJECT_NAME/tar/
    - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "tar xzvf /tmp/$CI_PROJECT_NAME/tar/$CI_PROJECT_NAME.tar.gz -C /tmp/$CI_PROJECT_NAME/untar/"
    - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "rm -rf /usr/share/nginx/html/iLens/code_merge/*"
    - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "cp -r /tmp/$CI_PROJECT_NAME/untar/UI/* /usr/share/nginx/html/iLens/code_merge/"
  after_script:
    - sshpass -p $OFC_PASSWD ssh $OFC_USERNAME@$OFC_HOSTNAME "rm -rf /tmp/$CI_PROJECT_NAME"
    - rm -f $CI_PROJECT_NAME.tar.gz
  only:
  - code_merge/KPMG_to_develop
  dependencies:
    - build-dev
  tags:
  - shell


# # #~~~~~| CODE QUALITY |~~~~~#
# codequality:
#   stage: build
#   image: ailens-registry.knowledgelens.com:9082/repository/kl-docker-repo/kl-it-operations/gitlab-runner/ubuntu:sonar-scanner
#   before_script:
#     - npm install -g sonarqube-scanner
#   script:
#     #  - npm install
#      - sonar-scanner -Dsonar.host.url=https://sonarqube.knowledgelens.com/ -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.projectName=$CI_PROJECT_NAME -Dsonar.login=admin -Dsonar.password=admin -Dsonar.sources=./src/app
#      - sleep 5
#      - python3 /opt/code_quality_report/static_code_quality_report_csv_v2.py $CI_PROJECT_NAME $GITLAB_USER_EMAIL,$EMAIL_TO $EMAIL_FROM $EMAIL_PASSWD False admin admin

#   only:
#      - develop
#   tags:
#      - docker
